//Даны указатели P1 и P2 на первый и последний элемент двусвязного списка, реализованного в виде цепосчи узлов, ограниченной по краям
//нулевыми указателями (если список пуст, то P1 = P2 = NULL). Преобразовать исходный список в циклический список, снабжённый барьерным элементом.
//Барьерный элемент должен иметь значение 0 и быть связан своими полями Next и Prev с первым и последним элементом исходного списка
//(в случае пустого исходного списка поля Next и Prev барьерного элемента должны указывать на сам барьерный элемент). Вывести указатель
//на барьерный элемент получаенного списка. Операцию выделения памяти использовать только для сздания барьерного элемента.

#include "pt4.h"
using namespace std;

void Solve()
{
    Task("ListWork46");
    PNode p1, p2, p;
    pt >> p1 >> p2;
    p = p1;
    if (p == NULL) {
        PNode NewNode = new TNode;
        NewNode->Next = NULL;
        NewNode->Data = 0;
        NewNode->Prev = NULL;
        p1 = p = p2 = NewNode;
    }
    else {
        PNode NewNode = new TNode;
        NewNode->Next = p;
        NewNode->Data = 0;
        NewNode->Prev = NULL;
        p->Prev = NewNode;
        p = NewNode;
    }
    p2->Next = p;
    p->Prev = p2;
    p->Next = p1;
    p1->Prev = p;
    pt << p;
}
